rnorm(1000)
rnorm(1000,5)
install.packages('ez')
library(ez)
install.packages('car')
exit
quit()
quit()
ls()
1+1
1+1
2+3
1 + 1 #returns 2; all other basic operations work similarly (-, /, *)
a <- 5 # a now equals five, this won't return any output, but you'll see in the environment window that a is now stored as a variable
a
b <- 6
a + b # returns 11, pretty predictable
b <- 6
6
x <- c(5, 4, 3, 2, 1) # c just means concatenate, it's Rs way of knowing that you want to treat each number as a separate elemenet within a vector
x
5:1
x * 2 # returns a vector with the same length of x where each element is multiplied by 2
x
x <- x *2
x
x <- x / 2
x
x
x[2] # returns the second element of variable x, in this case the element 4
x[2:4] # returns a vector containing the second through the fourth elements
x[c(1,2,4)] # returns the first, second, and fourth element of vector x, and it returns this as a vector
x[1,2,4] # returns the first, second, and fourth element of vector x, and it returns this as a vector
y <- c(1,2,4)
y
x[y] ## but now you can see how the syntax can get all tricky and nested
x[x>2] # returns '5,4,3'; notice how you have to refer to the vector again inside the vector
x[x>2 & x<5] ## notice how you have to refer to x AGAIN on the other side of the logical joiner (the &)
y <- 15:19
x[y>17]
y
y>17
x
x
x>2
x[c(T,T,T,F,F)]
x[x>2]
s <- c('a','b','c') # a character vector
f <- c('red','red','red','blue','blue','blue') # a factor vector
n <- c(1,2,3) # a numeric vector
c(1,'red')
f <- as.factor(f) ## also as.character(), and as.numeric(), among others
f
summary(f) ## returns detail about whatever object you give it
str(f) ## same idea, but focuses on the types of variables in any given object
head(f) ## returns the first few entries of an object, useful for looking at the first few rows of a large dataset
hist(x) ## returns a quick histogram of a vector, the object that you pass to it must be a numeric vector (wouldn't make sense otherwise)
library(MASS)
df <- ToothGrowth
df
summary(df)
df[3,2]
df[5:10,1]
df$len
df$len[5]
df$len[5:10]
df[5:10, 1]
df[5:10, 'len']
df$len > 10
df[df$len > 10, ]
df
df2 <- df[df$len > 10, ]
rm(df2)
df2 <- df[df$len > 9, ]
head(df)
df$len * 2
df$lenX2 <- df$len * 2
head(df)
help(ifelse)
??ifelse
?ifelse()
df$len > 10
df$len_d <- ifelse(df$len > 10, 1, 0)
head(df)
df$len_d <- ifelse(df$len > 10, 2, ifelse(df$len > 4 & df$len < 10, 1, 0))
df
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
main()
df <- freeny
head(df)
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
main()
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
1+1
mean(c(1,2,3))
a <-52
1 + 1 #returns 2; all other basic operations work similarly (-, /, *)
1 + 1 #returns 2; all other basic operations work similarly (-, /, *)
a <- 1 + 1
a <- 5 # a now equals five, this won't return any output, but you'll see in the environment window that a is now stored as a variable
b <- 6
a + b # returns 11, pretty predictable
c(5, 4, 3, 2, 1)
c(5, 4, 3, 2, 'a')
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_notes_updated.r', echo=TRUE)
rm(list = ls())
a <- 1 + 1
c(5, 4, 3, 2, a)
rm(a)
c(5, 4, 3, 2, a)
5:1
x <- 5:1
x * 2
x <- x * 2
x <- x / 2
x
x[2]
2:4
[2:4]
x[2:4]
x[c(1,2,4)]
x[2:4,5]
x[c(2:4,5)] # returns a vector containing the second through the fourth elements
y <- c(1,2,4)
x[y] ## but now you can see how the syntax can get all tricky and nested
y
x
y <- c(1,2,4)
y
x[y]
x[x>2] # returns '5,4,3'; notice how you have to refer to the vector again inside the vector
x>2
x[x>2] # returns '5,4,3'; notice how you have to refer to the vector again inside the vector
x[>2]
x[x>2 & x<5] ## notice how you have to refer to x AGAIN on the other side of the logical joiner (the &)
y <- 15:19
x[y>17]
y>17
x
y>17
x <- c('red','blue','green','orange','purple')
x
y <- 15:19
y
y>17
x[y>17]
s <- c('a','b','c') # a character vector
f <- c('red','red','red','blue','blue','blue') # a factor vector
n <- c(1,2,3) # a numeric vector
f <- as.factor(f)
f
class(f)
typeof(f)
summary(f)
summary(x)
summary(n)
str(f)
x <- c(5, 4, 3, 2, 1)
hist(x) ## returns a quick histogram of a vector, the object that you pass to it must be a numeric vector (wouldn't make sense otherwise)
library(MASS)
df <- ToothGrowth
df
hist(df$len)
df[3,2]
df[5:10,1]
df$len
df$len[5]
df[5,1]
df$len[5:10]
df[5:10, 1]
df[5:10, 'len']
df$len > 10
df[5:10,]
df
df$len > 10
df[df$len > 10,]
df2 <- df[df$len > 10, ]
df$len * 2
df$lenX2 <- df$len * 2
head(df)
df$lenX2[3] <- 10
head(df)
colnames(df)
colnames(df)[4] <- 'new_var'
colnames(df)
df$len_c <- df$len - mean(df$len)
head(df)
mean(df$len_c)
df$len > 10
df$len_d <- ifelse(df$len > 10, 1, 0)
head(df)
median(df$len)
df$len_d <- ifelse(df$len > 10, 2, ifelse(df$len > 4 & df$len < 10, 1, 0))
df
library(MASS)
a <- 5
b <- 6
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
main()
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
source('C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 1 - Introduction/class1_exercises.R')
main()
df <- data.frame(blue = 1:5, green = c(7,5,3,1,8), red = c(1.5,7.9,1.4,5.6,1.1))
df
current_data <- read.csv('www.lehigh.edu/~dab414/easy_clean.csv',header = T)
current_data <- read.csv('http://www.lehigh.edu/~dab414/easy_clean.csv',header = T)
head(current_data)
current_data <- read.csv('http://www.lehigh.edu/~dab414/easy_clean.csv',header = T)
library(data.table)
fread('http://lehigh.edu/~dab414/easy_clean.csv')
df <- data.frame(blue = 1:5, green = c(7,5,3,1,8), red = c(1.5,7.9,1.4,5.6,1.1))
df
library(MASS)
tooth <- ToothGrowth
head(tooth)
tooth[tooth$supp == 'VC', 'len']
help(mean)
library(data.table) # notice you don't need the quotes anymore
help(data.table) # this help page will prob be confusing at first, but that's okay cuz that's what I'm here for
library(dplyr)
getwd()
setwd("C:/Users/dbrau/Google Drive/GRAD/Classes/Year 4/Spring/Quantitative Things/Class 2 -- Manipulating Data")
source('test.r')
head(current_data)
current_data <- fread('http://lehigh.edu/~dab414/easy_clean.csv')
library(data.table)
current_data <- fread('http://lehigh.edu/~dab414/easy_clean.csv')
head(current_data)
str(current_data)
current_data$current <- as.factor(current_data$current)
current_data$other <- as.factor(current_data$other)
str(current_data)
head(current_data)
current_data$subject <- as.factor(current_data$subject)
current_data <- as.data.table(current_data)
subject_means <- current_data[, mean(transcode)]
subject_means
mean(current_data$transcode)
subject_means <- current_data[, mean(transcode), by = .(subject, current, other)]
subject_means[1:50]
subject_means <- current_data[, .(switch = mean(transcode)), by = .(subject, current, other)]
head(subject_means)
subject_means[, .(switch = mean(switch)), by = .(current, other)]
subject_means[5, 'switch'] <- NA
head(subject_means)
subject_means[, .(switch = mean(switch)), by = .(current, other)]
subject_means[, .(switch = mean(switch, na.rm = T)), by = .(current, other)]
subject_means[, .(switch = mean(switch, na.rm = T), se = sd(switch) / sqrt(.N)), by = .(current, other)]
subject_means[, .(switch = mean(switch, na.rm = T), se = sd(switch, na.rm = T) / sqrt(.N)), by = .(current, other)]
current_data_df <- as.data.frame(current_data)
current_data_df[1:5, 'current']
current_data[1:5, 'current']
current_data$current[1:5]
